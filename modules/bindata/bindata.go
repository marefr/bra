// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x6e\xdb\x30\x10\x86\x77\x3d\xc5\x41\xee\x98\x26\xee\xe0\xa5\x80\x87\xa0\xcd\x98\x22\x28\x02\x74\x30\x04\x81\x26\x8f\xea\x21\xc7\xa3\x41\x1e\x13\xfb\xed\x0b\x52\x6e\x6b\xb8\x6a\x97\x6a\x11\x44\xf1\xfb\x78\xf7\xf3\x76\xa9\xc8\xd0\x91\x90\x8e\x36\xb8\x0c\x5b\xd8\xc1\xe2\xb3\x82\x4f\x31\x04\x23\x2e\x43\x2a\x02\x24\x90\xd5\x24\xed\x00\x76\xfd\x14\xfb\x1b\xe8\x49\xb2\x1a\xe6\x7e\xb8\xb9\x58\xdc\x17\x62\xf7\x73\xe9\xf6\xee\xdd\xfd\xd3\xd3\xf8\xe5\xfe\xf1\xa1\x1f\xba\xa1\x7b\x33\x6a\xbf\x8f\x86\x19\xb6\xa0\xa9\xe0\xe2\xb1\xdf\xea\x26\xa8\x9b\x72\xd9\xbf\x77\x94\xd0\x6a\x4c\x84\xf9\x8c\x3b\x4a\xad\xec\x61\xb9\xea\xcf\xbf\x01\xd0\x08\x8d\x39\x93\x78\xd4\x46\xf6\xb7\x53\xec\xaf\xf1\x15\x3c\x1c\x15\x25\x53\x94\x0b\x90\x26\x89\x09\xcf\x10\x69\xed\x50\xa2\xc3\x31\x44\x57\x18\x73\xb5\xfc\x71\x24\x1e\x2d\x17\x87\xe0\x53\x0c\xb3\x86\x64\x3a\x9b\x46\x4f\x8c\x7f\x2b\x7f\x05\x5f\x71\xc2\xe3\x21\x83\x8f\x09\x1a\x40\x32\x41\x3e\xa0\x25\x4f\x16\x24\x2a\xf9\x1a\x84\x8f\xcc\xf1\x6d\xcc\xa7\xc0\x24\x2f\x55\xe7\x0d\x67\xbc\x6a\x47\xcc\x9e\xf1\xce\x51\xae\x6f\x98\x99\xe6\x3b\x85\x7d\x64\xb2\x30\xc3\xd1\xd7\xa0\xe1\x32\xe8\x76\x89\xa3\x43\x36\x27\xd8\xc2\x87\xcd\x7a\xbd\x50\xeb\x23\x09\x05\xc3\x40\xa2\x98\x5e\x0d\xd7\xd6\x9f\x13\x4d\x13\x26\x68\x02\xc0\x57\x14\xed\xda\xff\x54\x0e\x3a\x2a\x85\x58\xb4\x19\xaf\x65\xcf\x14\x70\x4e\x9d\x14\x8a\x28\x71\xcd\xc0\x22\xbc\x10\x73\x37\x25\x63\xd1\x17\x1e\xeb\xd7\x52\xb7\xf3\xdc\x90\xb6\xe0\xf0\x48\x0a\x46\x1c\xec\xd1\xd7\xcb\x9b\x3b\xe3\xd3\xec\xfa\xf7\xd4\x9f\x5d\xbf\x46\x5f\x63\x9d\xfe\xff\x1a\xfa\x6e\x97\x4f\x62\x87\x8e\x29\x2b\xca\x68\x9c\x4b\xb0\x85\xfe\xe3\x66\xbd\x59\xf7\x5d\xc2\x10\x15\xaf\x57\x7f\x04\x00\x00\xff\xff\x7e\x28\x7b\x0d\xa6\x03\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 934, mode: os.FileMode(436), modTime: time.Unix(1539272960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.bra.toml": &bintree{templatesDefaultBraToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

